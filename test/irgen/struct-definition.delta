// RUN: %delta -print-ir %s | %FileCheck %s

// CHECK: %Foo = type { i32, i1 }
struct Foo {
    var a: int;
    let b: bool;

    // CHECK: define %Foo @Foo.init(i32 %a, i1 %b)
    init(a: int, b: bool) {
        // CHECK-NEXT: %1 = alloca %Foo

        // CHECK-NEXT: %2 = getelementptr inbounds %Foo, %Foo* %1, i32 0, i32 0
        // CHECK-NEXT: store i32 %a, i32* %2
        this.a = a;
        // CHECK-NEXT: %3 = getelementptr inbounds %Foo, %Foo* %1, i32 0, i32 1
        // CHECK-NEXT: store i1 %b, i1* %3
        this.b = b;
        // CHECK-NEXT: %4 = getelementptr inbounds %Foo, %Foo* %1, i32 0, i32 0
        // CHECK-NEXT: %5 = load i32, i32* %4
        // CHECK-NEXT: %6 = add i32 %5, 1
        // CHECK-NEXT: store i32 %6, i32* %4
        // CHECK-NEXT: %7 = load %Foo, %Foo* %1
        this.a++;
        // CHECK-NEXT: ret %Foo %7
    }
}

func main() {
    // CHECK: %1 = call %Foo @Foo.init(i32 666, i1 true)
    // CHECK-NEXT: store %Foo %1, %Foo* %f
    var f = Foo(666, true);
    // CHECK-NEXT: %2 = getelementptr inbounds %Foo, %Foo* %f, i32 0, i32 0
    // CHECK-NEXT: %3 = load i32, i32* %2
    // CHECK-NEXT: %4 = add i32 %3, 1
    // CHECK-NEXT: store i32 %4, i32* %2
    f.a++;
    // CHECK-NEXT: %5 = getelementptr inbounds %Foo, %Foo* %f, i32 0, i32 0
    // CHECK-NEXT: %6 = load i32, i32* %5
    // CHECK-NEXT: store i32 %6, i32* %bar
    var bar = f.a;
    // CHECK-NEXT: %7 = getelementptr inbounds %Foo, %Foo* %f, i32 0, i32 1
    // CHECK-NEXT: %8 = load i1, i1* %7
    // CHECK-NEXT: store i1 %8, i1* %qux
    var qux = f.b;
    // CHECK-NEXT: ret
}
