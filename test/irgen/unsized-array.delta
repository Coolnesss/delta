// RUN: %delta -print-ir %s | %FileCheck %s

func main() {
    // CHECK: %three = alloca [3 x i32]
    // CHECK-NEXT: %b = alloca i32
    // CHECK-NEXT: %ref = alloca { i32*, i32 }
    // CHECK-NEXT: %bb = alloca i32
    // CHECK-NEXT: store [3 x i32] [i32 0, i32 42, i32 0], [3 x i32]* %three
    var three = [0, 42, 0];
    // CHECK-NEXT: %1 = getelementptr [3 x i32], [3 x i32]* %three, i32 0, i32 0
    // CHECK-NEXT: %2 = insertvalue { i32*, i32 } undef, i32* %1, 0
    // CHECK-NEXT: %3 = insertvalue { i32*, i32 } %2, i32 3, 1
    // CHECK-NEXT: call void @foo({ i32*, i32 } %3)
    foo(&three);
    // CHECK-NEXT: call void @bar([3 x i32]* %three)
    bar(&three);
    // CHECK-NEXT: store i32 3, i32* %b
    let b = three.count;
    // CHECK-NEXT: %4 = getelementptr [3 x i32], [3 x i32]* %three, i32 0, i32 0
    // CHECK-NEXT: %5 = insertvalue { i32*, i32 } undef, i32* %4, 0
    // CHECK-NEXT: %6 = insertvalue { i32*, i32 } %5, i32 3, 1
    // CHECK-NEXT: store { i32*, i32 } %6, { i32*, i32 }* %ref
    let ref: int[]& = &three;
    // CHECK-NEXT: %ref1 = load { i32*, i32 }, { i32*, i32 }* %ref
    // CHECK-NEXT: %count = extractvalue { i32*, i32 } %ref1, 1
    // CHECK-NEXT: store i32 %count, i32* %bb
    let bb = ref.count;
    // CHECK-NEXT: ret
}

// CHECK: define void @foo({ i32*, i32 } %ints)
func foo(ints: int[]&) {
    // CHECK-NEXT: %a = alloca i32
    // CHECK-NEXT: %b = alloca i32
    // CHECK-NEXT: %c = alloca { i32*, i32 }
    // CHECK-NEXT: %1 = extractvalue { i32*, i32 } %ints, 0
    // CHECK-NEXT: %2 = getelementptr i32, i32* %1, i32 1
    // CHECK-NEXT: %3 = load i32, i32* %2
    // CHECK-NEXT: store i32 %3, i32* %a
    let a = ints[1];
    // CHECK-NEXT: %count = extractvalue { i32*, i32 } %ints, 1
    // CHECK-NEXT: store i32 %count, i32* %b
    let b = ints.count;
    // CHECK-NEXT: store { i32*, i32 } %ints, { i32*, i32 }* %c
    let c: int[]* = ints;
    // CHECK-NEXT: ret void
}

// CHECK: define void @bar([3 x i32]* %ints)
func bar(ints: int[3]&) {
    // CHECK-NEXT: %b = alloca i32
    // CHECK-NEXT: %ref = alloca { i32*, i32 }
    // CHECK-NEXT: store i32 3, i32* %b
    let b = ints.count;
    // CHECK-NEXT: %1 = getelementptr [3 x i32], [3 x i32]* %ints, i32 0, i32 0
    // CHECK-NEXT: %2 = insertvalue { i32*, i32 } undef, i32* %1, 0
    // CHECK-NEXT: %3 = insertvalue { i32*, i32 } %2, i32 3, 1
    // CHECK-NEXT: store { i32*, i32 } %3, { i32*, i32 }* %ref
    let ref: int[]* = ints;
    // CHECK-NEXT: ret void
}
