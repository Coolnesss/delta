// RUN: check_exit_status 0 %delta run %s %p/../test-support.delta

class C {
    let i: int;

    init(i: int) {
        this.i = i;
    }

    deinit() {}
}

func main() {
    var a = Array<C>();
    assert(a.size() == 0 && a.capacity() >= 0, "initial size and capacity are valid");

    a.push(C(1));
    assert(a[0].i == 1, "appended element has correct value");

    a.push(C(2));
    a.push(C(3));
    a.removeAt(1);
    assert(a[0].i == 1 && a[1].i == 3, "elements after removed element are shifted towards beginning");

    a.removeLast();
    a.push(C(4));
    assert(a.size() == 2 && a.capacity() >= 2, "size and capacity are valid after adding and removing elements");

    testArrayIterator(a);
    testArrayMutatingIteration();
}

func testArrayIterator(array: Array<C>* ) {
    var iterator = array.iterator();

    assert(iterator.hasNext(), "testArrayIterator: hasNext() - 1");
    assert(iterator.next().i == 1, "testArrayIterator: next() - 1");

    assert(iterator.hasNext(), "testArrayIterator: hasNext() - 2");
    assert(iterator.next().i == 4, "testArrayIterator: next() - 2");

    assert(!iterator.hasNext(), "testArrayIterator: hasNext() - 3");
}

func testArrayMutatingIteration() {
    var a = Array<int>();
    a.push(1);
    a.push(2);
    a.push(3);

    for (let e in a) {
        *e++;
    }

    assert(*a[0] == 2, "mutating iteration modified elements in the array");
    assert(*a[1] == 3, "mutating iteration modified elements in the array");
    assert(*a[2] == 4, "mutating iteration modified elements in the array");
}
