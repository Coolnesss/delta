class Array<Element> {
    var bufferPointer: mutable Element*;
    var size: int;
    var capacity: int;

    /// Initializes an empty array.
    init() {
        bufferPointer = null;
        size = 0;
        capacity = 0;
    }

    deinit() {
        free(cast<mutable void*>(bufferPointer));
    }

    /// Returns the number of elements in the array.
    func size() -> int {
        return size;
    }

    /// Returns the number of elements the array can store without allocating more memory.
    func capacity() -> int {
        return capacity;
    }

    /// Returns a reference to the element at the given index.
    func [](index: int) -> mutable Element& {
        return bufferPointer.offsetUnsafely(int64(index))!;
    }

    /// Adds the given element to the end of the array.
    mutating func append(newElement: Element) {
        reserve(size + 1);
        *bufferPointer.offsetUnsafely(int64(size)) = newElement;
        size++;
    }

    /// Ensures that the capacity is large enough to store the given number of elements.
    mutating func reserve(minimumCapacity: int) {
        if (minimumCapacity > capacity) {
            if (capacity == 0) {
                capacity = 1;
            } else {
                capacity *= 2;
            }

            let newBufferPointer = cast<mutable Element*>(malloc(sizeOf<Element>() * uint64(capacity)));

            for (index in 0..size) {
                let source = bufferPointer.offsetUnsafely(int64(index));
                let target = newBufferPointer.offsetUnsafely(int64(index));
                *target = *source;
            }

            free(cast<mutable void*>(bufferPointer));
            bufferPointer = newBufferPointer;
        }
    }

    /// Removes the first element from the array.
    /// Other elements are moved towards the beginning of the array by one index.
    mutating func removeFirst() {
        removeAt(0);
    }

    /// Removes the last element from the array.
    mutating func removeLast() {
        // TODO: Call deinitializer of removed element.
        size--;
    }

    /// Removes the element at the given index from the array.
    /// Elements following the removed element are moved towards the beginning of the array by one index.
    mutating func removeAt(index: int) {
        for (i in (index + 1)..size) {
            let source = bufferPointer.offsetUnsafely(int64(i));
            let target = bufferPointer.offsetUnsafely(int64(i - 1));
            *target = *source;
        }
        size--;
    }
}
