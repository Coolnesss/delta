struct StringRef {
    var characters: ArrayRef<char>;

    init(pointer: char*, length: uint) {
        characters = ArrayRef<char>(pointer, length);
    }

    init (string: String*) {
        characters = ArrayRef<char>(string.data(), string.size());
    }

    func size() -> uint {
        return characters.size();
    }

    /// Returns the character at the given index.
    func [](index: uint) -> char {
        return *characters[index];
    }

    func data() -> char* {
        return characters.data();
    }

    /// Supports using strings with sets and dicts
    func hash() -> uint64 {
        var hashValue: uint64 = 5381;

        for (let index in uint(0)..characters.size()) {
            hashValue = ((hashValue << 5) + hashValue) + uint64(this[index]);
        }

        return hashValue;
    }

    func iterator() -> StringIterator {
        return StringIterator(this);
    }
}
