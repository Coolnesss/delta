struct MapIterator<Key, Value> {
    var hashTableIterator: ArrayIterator<Array<KeyValuePair<Key, Value>>>;
    var current: KeyValuePair<Key, Value>*;

    init(map: Map<Key, Value>* ) {
        hashTableIterator = map.hashTable.iterator();
        current = undefined;
        _skipEmptySlots();
    }

    func hasNext() -> bool {
        return hashTableIterator.hasNext();
    }

    mutating func next() -> KeyValuePair<Key, Value>* {
        let next = current;
        let slot = hashTableIterator.current();
        let slotEnd = slot.data() + slot.size();
        current++;

        if (current == slotEnd) {
            hashTableIterator.next();
            _skipEmptySlots();
        }

        return next;
    }

    mutating func _skipEmptySlots() {
        while (hashTableIterator.hasNext()) {
            if (hashTableIterator.current().size() != 0) {
                current = hashTableIterator.current().data();
                break;
            }
            hashTableIterator.next();
        }
    }
}
