class String {
    var characters: Array<char>;

    /// Initializes an empty string.
    init() {
        characters = Array<char>();
        characters.push('\0');
    }

    init(string: StringRef) {
        characters = Array<char>();
        characters.reserve(string.size() + 1);

        for (let ch in string) {
            characters.push(ch);
        }

        characters.push('\0');
    }

    func size() -> uint {
        return characters.size() - 1;
    }

    /// Returns the character at the given index.
    func [](index: uint) -> char {
        return *characters[index];
    }

    /// Returns the string as a C-style, i.e. null-terminated, string.
    /// Modifying `this` after calling this function invalidates the returned pointer.
    func cString() -> char* {
        return data();
    }

    /// Returns a pointer to the first character in the string.
    func data() -> char* {
        return characters.data();
    }

    /// Returns a pointer to the first character in the string.
    mutating func data() -> mutable char* {
        return characters.data();
    }

    mutating func push(character: char) {
        *characters[size()] = character;
        characters.push('\0');
    }

    /// Removes the first character from the string.
    /// Other characters are moved towards the beginning of the string by one index.
    mutating func removeFirst() {
        characters.removeFirst();
    }

    /// Removes the last character from the string.
    mutating func removeLast() {
        characters.removeAt(characters.size() - 2);
    }

    /// Supports using strings with sets and dicts
    func hash() -> uint64 {
        return StringRef(this).hash();
    }

    func iterator() -> StringIterator {
        // TODO: When implicit initializers have been implemented, remove the StringRef() call below.
        return StringIterator(StringRef(this));
    }

    /// Returns the index of the given character, or -1 if it's not found
    func find(c: char) -> int {
        return find(c, 0);
    }

    /// Returns the index of the given character, or -1 if it's not found.
    /// Starts from start
    func find(c: char, start: uint) -> int {

        for (let i in start..size()) {
            if (*characters[i] == c) {
                return int(i);
            }
        }
        return -1;
    }

    func substr(range: Range<int>) -> StringRef {
        return StringRef(characters[uint(range.start)], uint(range.size()));
    }

    func substr(range: Range<uint>) -> StringRef {
        return StringRef(characters[range.start], range.size());
    }
}

func +(a: StringRef, b: StringRef) -> String {
    var result = String();

    for (let ch in a) {
        result.push(ch);
    }

    for (let ch in b) {
        result.push(ch);
    }

    return result;
}

func +(a: String, b: StringRef) -> String {
    var result = a;

    for (let ch in b) {
        result.push(ch);
    }

    return result;
}

func ==(a: StringRef, b: StringRef) -> bool {
    if (a.size() != b.size()) {
        return false;
    }

    // TODO: Change this loop to use zip iterator when it's added.
    for (let index in 0..a.size()) {
        if (a[index] != b[index]) {
            return false;
        }
    }

    return true;
}

func ==(a: String*, b: String*) -> bool {
    return StringRef(a) == StringRef(b);
}

func ==(a: String*, b: StringRef) -> bool {
    return StringRef(a) == b;
}

func ==(a: StringRef, b: String*) -> bool {
    return a == StringRef(b);
}

func <(a: StringRef, b: StringRef) -> bool {
    if (a.size() != b.size()) {
        return a.size() < b.size();
    }

    // TODO: Change this loop to use zip iterator when it's added.
    for (let index in 0..a.size()) {
        if (a[index] < b[index]) {
            return true;
        }
        if (a[index] > b[index]) {
            return false;
        }
    }

    return false;
}
